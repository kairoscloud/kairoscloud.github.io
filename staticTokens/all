node -e 
// This is the infrastructural backbone of all Kairos Cloud custom code that uses the GHL API
// It is a node.js script that runs on a schedule (every day at 2am EST) to refresh all access tokens for all locations
// These values are then stored in a Firestore database and retrieved by our other scripts
// This code handles a lot of sensitive information (key.json) that should not be shared publicly, which is why this isn't in a public pages repo like the rest of our code
// Jacob Westra â€“ jacob@thekairosmedia.com

const admin = require('firebase-admin');

const serviceAccount = require('./key.json'); // Path to firebase credentials

// initialize firebase. This is typically done with globalFirebase.js for static js/html, but since this is node, it's different
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  apiKey: 'AIzaSyAkvl6HKgup1AofIrUU_Q7b4RlvhI2QTpc',
  authDomain: 'kairos-test-eedd6.firebaseapp.com',
  projectId: 'kairos-test-eedd6',
  storageBucket: 'kairos-test-eedd6.appspot.com',
  messagingSenderId: '34445244935',
  appId: '1:34445244935:web:b4ed7e9be70c16251d88a2',
  measurementId: 'G-M1BXTKSG3B',
});

const firestore = admin.firestore();

const tokensRef = firestore.collection('tokens'); // the 'tokens' collection in firestore
let globalRefreshToken = '';

async function getGlobalRefreshToken() {
  const docRef = tokensRef.doc('agency');
  const docSnap = await docRef.get();
  globalRefreshToken = docSnap.data().refreshToken;
}

getGlobalRefreshToken().then(() => {
  // grab the refresh token from firebase to generate a new one
  getAgencyAccessToken().then(async (result) => {
    try {
      tokensRef.doc('agency').update({
        // these fields only apply for the 'agency' document. The rest are locations.
        agencyAccessToken: result.access_token,
        refreshToken: result.refresh_token,
        timestamp: admin.firestore.FieldValue.serverTimestamp(), // log timestamp for debugging
      });
      console.log('Updating agency token: Success');
    } catch (error) {
      console.error('Updating agency token: Failure');
      console.error(error);
    }

    // use the GHL API to get a list of locations
    const url =
      'https://services.leadconnectorhq.com/locations/search?limit=1000';
    const options = {
      method: 'GET',
      headers: {
        Authorization: 'Bearer ' + result.access_token,
        Version: '2021-07-28',
        Accept: 'application/json',
      },
    };

    const response = await fetch(url, options);
    const dataR = await response.json(); // data unprocessed
    const data = dataR.locations;
    let updatedCount = 0;
    let aggregateTokenString = '';
    //console.log(data);

    // for each location in the retrieved list, we get a new access token
    for (let i = 0; i < data.length; i++) {
      let location = data[i].id;
      let locName = data[i].name;
      try {
        let locationAccessToken = await getLocationAccessToken(
          // await causes some delay in the for loop, instead of them all being called at once. In the future, when we have 100+ locations, this will be wise to avoid hitting the API calls/sec limit
          result.access_token,
          location,
        );
        tokensRef.doc(location).update({
          locationAccessToken: locationAccessToken,
          timestamp: admin.firestore.FieldValue.serverTimestamp(), // log timestamp for debugging
        });
        console.log('Updating ' + locName + ' (' + location + '): Success');
        updatedCount++;
        aggregateTokenString += ':' + location + ',' + locationAccessToken + ':';
      } catch (error) {
        console.error('Updating ' + locName + ' (' + location + '): Failure');
        console.error(error); // errors should be properly handled now; the GH action log will list 'failure'
      }
    }
    console.log(
      'Summary: ' + updatedCount + '/' + data.length + ' locations updated',
    );
    console.log('-----'); // this splits the diagnostic console.log output from the token strings
    console.log(aggregateTokenString);
  });
});

async function getAgencyAccessToken() {
  const url = 'https://services.leadconnectorhq.com/oauth/token';
  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
    },
    body: new URLSearchParams({
      client_id: '65d907b2cca7ce7d6cbd8dae-lsz5yrln',
      client_secret: 'b6e90c29-dce0-4acd-8d96-269ee936d0aa',
      grant_type: 'refresh_token',
      code: '',
      refresh_token: globalRefreshToken, // previous refresh token we took from firebase earlier
      user_type: 'Company',
      redirect_uri: 'https://oauth.kairoscloud.io/url-redirect',
    }),
  };

  try {
    const response = await fetch(url, options);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
  }
}

async function getLocationAccessToken(token, location) {
  const url = 'https://services.leadconnectorhq.com/oauth/locationToken';
  const options = {
    method: 'POST',
    headers: {
      Version: '2021-07-28',
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
      Authorization: 'Bearer ' + token,
    },
    body: new URLSearchParams({
      companyId: 'eRzyNWgO7fUGsvSQv7eR',
      locationId: location,
    }),
  };

  try {
    const response = await fetch(url, options);
    const data = await response.json();
    //console.log(data);
    return data.access_token;
    //console.log(data);
  } catch (error) {
    console.error(error);
  }
}

